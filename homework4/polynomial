#include "poly.h"
using namespace std;

namespace main_savitch_5
{
polynomial::polynomial(double c, unsigned int exponent)
{

                EPSILON = std::numeric_limits<double>::epsilon();

                if (fabs(c) < EPSILON){
                    head_ptr = new polynode();
                    tail_ptr = head_ptr;
                    current_degree = 0;
                }

                else if (exponent == 0){
                    head_ptr = new polynode(c, 0, NULL, NULL);
                    tail_ptr = head_ptr;
                    current_degree = 0;
                }

                else{
                    //syntax -- (c, exponent, fore, back)
                    head_ptr = new polynode();
                    tail_ptr = new polynode(c, exponent, NULL, head_ptr);
                    head_ptr->set_fore(tail_ptr);
                    current_degree = exponent;
                }

                recent_ptr = head_ptr;
    }

    polynomial& polynomial::operator=(const polynomial& source)
    {
    // store machine epsilon
    EPSILON = std::numeric_limits<double>::epsilon();

    // self-assignment
    if (this == &source)
        return *this;

    // be extra safe
    if (head_ptr != NULL)
        this->clear();

    unsigned int expo = 0;

    do {
        assign_coef(source.coefficient(expo), expo);
        expo = source.next_term(expo);
    } while (expo != 0);

    current_degree = source.degree();
    return *this;
}

    polynomial::polynomial(const polynomial& source)
    {
        EPSILON = std::numeric_limits<double>::epsilon();

        //must create the initial nodes or else seg fault
        this->head_ptr = new polynode();
        this->tail_ptr = head_ptr;
        *this = source;
    }

    polynomial::~polynomial()
    {
        clear();
        delete head_ptr;
        head_ptr = NULL;
    }

    void polynomial::clear()
    {
        polynode* handle;

        while (head_ptr->fore() != NULL){
            handle = head_ptr->fore();
            delete head_ptr;
            head_ptr = handle;
        }

        head_ptr->set_coef(0);
        head_ptr->set_exponent(0);
        current_degree = 0;
        head_ptr->set_fore(NULL);
        head_ptr->set_back(NULL);
        recent_ptr = head_ptr;
        handle = NULL;
    }

    double polynomial::coefficient(unsigned int exponent) const
    {

        set_recent(exponent);

        if (recent_ptr->exponent() != exponent)
            return 0.0;

        else
            return recent_ptr->coef();

    }

    void polynomial::add_to_coef(double amount, unsigned int exponent)
    {
        set_recent(exponent);

        if (fabs(amount) < EPSILON)
            return;

        else if(recent_ptr->exponent() == exponent){
            assign_coef((recent_ptr->coef() + amount), recent_ptr->exponent());
        }

        else
            assign_coef(amount, exponent);
    }

    void polynomial::assign_coef(double coefficient, unsigned int exponent)
    {
        set_recent(exponent);
        polynode* backward = recent_ptr->back();
        polynode* forward = recent_ptr->fore();

        if (fabs(coefficient) <= EPSILON)
            coefficient = 0;

        if (exponent == 0){
            head_ptr->set_coef(coefficient);
            return;
        }

        else if (fabs(coefficient) < EPSILON){
            //if exponents are same, just set the coef to 0
            if (exponent == recent_ptr->exponent()){
                if (recent_ptr == head_ptr){
                    recent_ptr->set_coef(0);
                    return;
                }
                //if its the tail_ptr
                else if (recent_ptr->exponent() == current_degree){
                    recent_ptr = recent_ptr->back();
                    recent_ptr->set_fore(NULL);
                    delete tail_ptr;
                    tail_ptr = recent_ptr;
                    current_degree = tail_ptr->exponent();
                }
                //otherwise... (means its in the middle somewhere)
                else{
                    forward->set_back(backward);
                    backward->set_fore(forward);
                    delete recent_ptr;
                    set_recent(exponent);
                }
            }
            else
                return;
        }

        else if (exponent > current_degree){
            polynode* myNode = new polynode(coefficient, exponent, NULL, recent_ptr);
            recent_ptr->set_fore(myNode);
            recent_ptr = myNode;
            tail_ptr = myNode;
            current_degree = exponent;
        }

        else if (recent_ptr->exponent() < exponent){
            polynode* myNode = new polynode(coefficient, exponent, forward, recent_ptr);
            recent_ptr->set_fore(myNode);
            forward->set_back(myNode);
            recent_ptr = myNode;
        }

        else if (recent_ptr->exponent() > exponent){
            polynode* myNode = new polynode(coefficient, exponent, recent_ptr, backward);
            recent_ptr->set_back(myNode);
            backward->set_fore(myNode);
            recent_ptr = myNode;
        }
        else
            recent_ptr->set_coef(coefficient);

    }

    unsigned int polynomial::next_term(unsigned int exponent) const
    {
            if (exponent >= current_degree)
                 return 0;

             set_recent(exponent);

            if (recent_ptr->fore() == NULL)
                 return 0;


            else
                return recent_ptr->fore()->exponent();
    }

    unsigned int polynomial::previous_term(unsigned int exponent) const
    {
            if (exponent <= 0)
                return UINT_MAX;

            set_recent(exponent-1);

            if (fabs(recent_ptr->coef()) < EPSILON)
                return UINT_MAX;

            if (recent_ptr == NULL)
                return UINT_MAX;

            // if (recent_ptr->coef() < 0)
            // previous_term(exponent-1);

            else
                return recent_ptr->exponent();
    }

    void polynomial::set_recent(unsigned int exponent) const
    {
        if (exponent == 0){
            recent_ptr = head_ptr;
            return;
        }

        else if (exponent > current_degree){
            recent_ptr = tail_ptr;
            return;
        }

        else if(recent_ptr->exponent() == exponent)
            return;

        //move forward or backward
        else if(recent_ptr->exponent() < exponent){
                while (recent_ptr->fore() != NULL && recent_ptr->exponent() < exponent)
                    recent_ptr = recent_ptr->fore();

                if (recent_ptr->exponent() > exponent)
                        recent_ptr = recent_ptr->back();
        }
        else{
                while (recent_ptr->back() != NULL && recent_ptr->exponent() > exponent)
                    recent_ptr = recent_ptr->back();
        }
    }

    double polynomial::eval(double x) const
    {
double total = 0;
        unsigned int expo = next_term(0);

        do {
            total = total + (coefficient(expo) * pow(x, (double) expo));
            expo = next_term(expo);
        } while (expo != 0);

        total = total + head_ptr->coef();
        return total;
    }

    polynomial polynomial::derivative() const
    {
        polynomial p;
        unsigned int expo = next_term(0);

        do {
            p.add_to_coef(expo * coefficient(expo), expo-1);
            expo = next_term(expo);
        } while (expo !=0);

return p;
    }

    polynomial operator+(const polynomial& p1, const polynomial& p2)
    {
polynomial p = p1;
        unsigned int expo = 0;

        do {
            p.add_to_coef(p2.coefficient(expo), expo);

            if (p.next_term(expo) <= p2.next_term(expo))
                expo = p.next_term(expo);
            else
                expo = p2.next_term(expo);
        } while (expo != 0);

return p;
    }

    polynomial operator-(const polynomial& p1, const polynomial& p2)
    {
        polynomial p = p1;
        unsigned int expo = 0;

        do {
            p.assign_coef(p.coefficient(expo) - p2.coefficient(expo), expo);

            if (p.next_term(expo) <= p2.next_term(expo))
                expo = p.next_term(expo);
            else
                expo = p2.next_term(expo);

        } while (expo != 0);

        return p;
    }

        polynomial operator*(const polynomial& p1, const polynomial& p2)
    {
        polynomial p;
        unsigned int expo1 = 0;
        unsigned int expo2 = 0;

        do{
            do{
                p.add_to_coef(p1.coefficient(expo1)*p2.coefficient(expo2), expo1+expo2);
                expo1 = p1.next_term(expo1);
            }while (expo1 != 0);
            expo1 = 0;
            expo2 = p2.next_term(expo2);
        }while (expo2 != 0);

        return p;
    }


    ostream& operator << (ostream& out, const polynomial& p)
    {
unsigned int expo = 0;

        do{
            out << p.coefficient(expo) << "*x^" << expo;
            expo = p.next_term(expo);

            if (expo != 0)
                out << " + ";
        }while(expo!=0);

        return out;
    }

    void polynomial::find_root(
    double& answer,
    bool& success,
    unsigned int& iterations,
    double guess,
    unsigned int maximum_iterations,
    double epsilon) const
    {
        success = false;
        for (iterations = 0; iterations < maximum_iterations && !success; ++iterations)
        {
            double f_x = eval(guess);
            if (fabs(f_x) < epsilon)
            {
                success = true;
                answer = guess;
            }

            double fprime_x = derivative().eval(guess);
            if (fabs(fprime_x) < epsilon)
                break;
            guess -= f_x / fprime_x;
        }
    }
}
